package main.java.tp;

import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

public class Biblioteca {

    private ArrayList<Libro> libros;

    private static final String EXIT_VALUE = "0";

    public void main(String[] args) {
        String userInput = "";
        while (shouldExecuteAnotherOperation(userInput)) {
            userInput = executeNewOperation();
        }
        printSalute();
    }

    private static boolean shouldExecuteAnotherOperation(String userInput) {
        return !EXIT_VALUE.equals(userInput);
    }

    private String executeNewOperation() {
        printMenu();
        String userInput = waitForUserInput();
        executeSelectedOption(userInput);
        return userInput;
    }

    public static void printMenu() {
        System.out.println("--");
        System.out.println("Bienvenido a la biblioteca.");
        System.out.println("Por favor ingrese una de las siguientes opciones:");
        System.out.println();
        System.out.println("A + Enter: si usted es administrador");
        System.out.println("B + Enter: si usted es cliente de la biblioteca");
        System.out.println();
        System.out.println("Si desea salir ingrese 0 + Enter");
        System.out.println("--");
    }

    private static String waitForUserInput() {
        return new Scanner(System.in).nextLine();
    }

    private void executeSelectedOption(String userInput) {
        if (EXIT_VALUE.equalsIgnoreCase(userInput)) {
            return;
        } else if ("A".equalsIgnoreCase(userInput)) {
            Administrador administrador = new Administrador("Admin123", "admin@gmail.com");
            administrador.executeOperation2();
        } else if ("B".equalsIgnoreCase(userInput)) {
            Cliente cliente = new Cliente("Cliente123", "cliente@gmail.com");
            cliente.executeOperation3();
        } else {
            printInvalidOption();
        }
        waitForUserInput();
    }

    private static void printInvalidOption() {
        System.out.println("--");
        System.out.println("La opción ingresada es incorrecta");
        System.out.println("--");
        System.out.println("Presione cualquier tecla para volver al menú.");
    }

    private static void printSalute() {
        System.out.println("--");
        System.out.println("Gracias por usar la página de esta biblioteca. Vuelva pronto");
        System.out.println("--");
    }

    class Usuario {
        public String nombre;
        public String email;

        Usuario(String nombreUsuario, String emailUsuario) {
            this.nombre = nombreUsuario;
            this.email = emailUsuario;
        }
    }

    class Administrador extends Usuario {

        public Administrador(String nombreAdministrador, String emailAdministrador) {
            super(nombreAdministrador, emailAdministrador);
            this.nombre = nombreAdministrador;
            this.email = emailAdministrador;
        }

        public String getNombreAdministrador() {
            System.out.println("--");
            System.out.println("Presione cualquier tecla para volver al menú.");
            System.out.println("Usted es ");
            return this.nombre;
        }

        public String getEmailAdministrador() {
            System.out.println("--");
            System.out.println("Presione cualquier tecla para volver al menú.");
            System.out.println("Su email es ");
            return this.email;
        }

        //Falta hacer el metodo updateCatalog

        private String executeOperation2() {
            printMenuAdministrador();
            String userInput = waitForUserInput();
            executeSelectedOptionAdministrador(userInput);
            return userInput;
        }
        private void executeSelectedOptionAdministrador(String userInput) {
            if (EXIT_VALUE.equalsIgnoreCase(userInput)) {
                return;
            } else if ("A".equalsIgnoreCase(userInput)) {
                Administrador.getNombreAdministrador();
            } else if ("B".equalsIgnoreCase(userInput)) {
                Administrador.getEmailAdministrador();
            } else if ("C".equalsIgnoreCase(userInput)) {
                //updateCatalog();
            } else {
                printInvalidOption();
            }
            waitForUserInput();
        }
    }

    class Cliente extends Usuario {
        private List<Reserva> reservas;

        public Cliente(String nombreCliente, String emailCliente) {
            super(nombreCliente, emailCliente);
            this.nombre = nombreCliente;
            this.email = emailCliente;
            this.reservas = new ArrayList<>();
        }

        public static String getNombreCliente() {
            System.out.println("--");
            System.out.println("Presione cualquier tecla para volver al menú.");
            System.out.println("Usted es ");
            return this.nombre;
        }

        public static String getEmailCliente() {
            System.out.println("--");
            System.out.println("Presione cualquier tecla para volver al menú.");
            System.out.println("Su email es ");
            return this.email;
        }

        public List<Reserva> getReservas() {
            return reservas;
        }

        public void reservar(Libro libro) {
            Reserva reserva = new Reserva(this, libro); // Crear una nueva reserva asociada al usuario y al libro
            reservas.add(reserva); // Agregar la reserva a la lista de reservas del usuario
        }

        public void devolver(Reserva reserva) {
            reserva.devolver(); // Llamar al método devolver de la reserva
            reservas.remove(reserva); // Eliminar la reserva de la lista de reservas del usuario
        }

        private String executeOperation3() {
            printMenuCliente();
            String userInput = waitForUserInput();
            executeSelectedOptionCliente(userInput);
            return userInput;
        }

        private void executeSelectedOptionCliente(String userInput) {
            if (EXIT_VALUE.equalsIgnoreCase(userInput)) {
                return;
            } else if ("A".equalsIgnoreCase(userInput)) {
                Cliente.getNombreCliente();
            } else if ("B".equalsIgnoreCase(userInput)) {
                Cliente.getEmailCliente();
            } else if ("C".equalsIgnoreCase(userInput)) {
                getReservas();
            } else if ("D".equalsIgnoreCase(userInput)) {
                Cliente.reservar(); //no se si en el argumento va libro o no
            } else if ("E".equalsIgnoreCase(userInput)) {
                devolver();
            } else {
                printInvalidOption();
            }
            waitForUserInput();
        }
    }

    public static void printMenuAdministrador() {
        System.out.println("--");
        System.out.println("Bienvenido administrador");
        System.out.println("Por favor ingrese una de las siguientes opciones:");
        System.out.println();
        System.out.println("A + Enter: para ver su nombre de usuario");
        System.out.println("B + Enter: para ver su email asociado");
        System.out.println("C + Enter: para actualizar el catálogo");
        System.out.println();
        System.out.println("Si desea salir ingrese 0 + Enter");
        System.out.println("--");
    }

    public static void printMenuCliente() {
        System.out.println("--");
        System.out.println("Bienvenido cliente");
        System.out.println("Por favor ingrese una de las siguientes opciones:");
        System.out.println();
        System.out.println("A + Enter: para ver su nombre de usuario");
        System.out.println("B + Enter: para ver su email asociado");
        System.out.println("C + Enter: para ver su historial de reservas");
        System.out.println("D + Enter: para reservar un libro");
        System.out.println("E + Enter: para devolver un libro");
        System.out.println();
        System.out.println("Si desea salir ingrese 0 + Enter");
        System.out.println("--");
    }

    // Enumeración que representa los posibles estados de un libro en la biblioteca
    enum Estado {
        DISPONIBLE, PRESTADO, RETRASO
    }

    // Clase Libro que representa un libro en la biblioteca
    class Libro {
        private final String titulo;
        private final String autor;
        private int cantidad;
        private final List<Calificacion> calificaciones;

        public Libro(String titulo, String autor, int cantidad) {
            this.titulo = titulo;
            this.autor = autor;
            this.cantidad = cantidad;
            this.calificaciones = new ArrayList<>(); // Lista de calificaciones realizadas para el libro
        }

        public String getTitulo() {
            System.out.println("--");
            System.out.println("El título es: ");
            return titulo;
        }

        public String getAutor() {
            System.out.println("--");
            System.out.println("El autor es: ");
            return autor;
        }

        public int getCantidad() {
            System.out.println("--");
            System.out.println("Ejemplares disponibles: ");
            return cantidad;
        }

        public List<Calificacion> getCalificaciones() {
            System.out.println("--");
            System.out.println("Estas son las calificaciones hechas, con puntuaciones del 1 al 5: ");
            return calificaciones;
        }

        public void prestar() {
            if (cantidad > 0) {
                cantidad--; // Decrementar la cantidad de libros disponibles al prestar uno
            }
        }

        public void devolver() {
            cantidad++; // Incrementar la cantidad de libros disponibles al devolver uno
        }

        public void calificar(Calificacion calificacion) {
            calificaciones.add(calificacion); // Agregar la calificación a la lista de calificaciones del libro
        }
    }

    // Clase Calificacion que representa una calificación realizada por un usuario para un libro
    class Calificacion {
        private final String comentario;
        private final int puntuacion;

        public Calificacion(String comentario, int puntuacion) {
            this.comentario = comentario;
            this.puntuacion = puntuacion;
        }

        public String getComentario() {
            System.out.println("");
            return comentario;
        }

        public int getPuntuacion() {
            System.out.println("");
            return puntuacion;
        }
    }

    // Clase Reserva que representa una reserva realizada por un usuario para un libro
    class Reserva {
        private final Cliente cliente;
        private final Libro libro;
        private Estado estado;

        public Reserva(Cliente cliente, Libro libro) {
            this.cliente = cliente;
            this.libro = libro;
            this.estado = Estado.PRESTADO;
            libro.prestar(); // Llamar al método prestar del libro al realizar la reserva
        }

        public Cliente getCliente() {
            return cliente;
        }

        public Libro getLibro() {
            return libro;
        }

        public Estado getEstado() {
            return estado;
        }

        public void devolver() {
            if (estado == Estado.PRESTADO) {
                estado = Estado.DISPONIBLE;
                libro.devolver();
            } else if (estado == Estado.RETRASO) {
                estado = Estado.DISPONIBLE;
                libro.devolver();
                cliente.reservar(libro);
            }
        }

        public void cancelar() {
            if (estado == Estado.PRESTADO) {
                estado = Estado.DISPONIBLE;
                libro.devolver();
            } else if (estado == Estado.RETRASO) {
                estado = Estado.DISPONIBLE;
                libro.devolver();
            }
            cliente.getReservas().remove(this.libro);
        }

        public void calificar(Calificacion calificacion) {
            libro.calificar(calificacion);
            estado = Estado.DISPONIBLE;
        }
    }
}




